
==================== FINAL INTERFACE ====================
2016-05-22 08:05:32.192004 UTC

interface GameO_JUKfeG9vDe2B5gqv2wJwqD:GameOfLife 7103
  interface hash: 95e3d0320254abbdb7a7a3be83f62800
  ABI hash: ec51a663243e0730859ca1a01260a6c2
  export-list hash: 8b9f54c3c647486b1909a379f3d63ad3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6cd18363ac4ac10a9f2665bafb105ffd
  sig of: Nothing
  used TH splices: False
  where
exports:
  GameOfLife.createOpts
  GameOfLife.gameGrid
  GameOfLife.glider
  GameOfLife.nextGeneration
  GameOfLife.readGrid
  GameOfLife.runGame
  GameOfLife.runGameContiniously
  GameOfLife.showGrid
  GameOfLife.GameOptions{GameOfLife.GameOptions GameOfLife.grid GameOfLife.runs}
  GameOfLife.Grid
  GameOfLife.RenderFunc
module dependencies:
package dependencies: ansi-terminal-0.6.2.3@ansit_BDlVdfJGo3VHCIHxPTNjH1
                      base-4.8.2.0* ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  ansi-terminal-0.6.2.3@ansit_BDlVdfJGo3VHCIHxPTNjH1:System.Console.ANSI b9ceebd406bd61b44d2625b896f1cfde
import  -/  base-4.8.2.0:Control.Concurrent 1268fba2c60b0505ec9e8731d08a8e75
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Conc.IO 55495385f28ec503077cad1cc3391aae
import  -/  base-4.8.2.0:GHC.IO bb5b81adcea33b14bd4abe16d7dde45f
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split 487cc1966f0f25916f1ba58bdff4b0ee
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split.Internals ec8cf5264ec78ab060cadb7ee5b994f0
51046791ec399d8726fe8e0ad9a20a93
  $fShowGameOptions :: GHC.Show.Show GameOfLife.GameOptions
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GameOfLife.GameOptions
                  GameOfLife.$fShowGameOptions_$cshowsPrec
                  GameOfLife.$fShowGameOptions_$cshow
                  GameOfLife.$fShowGameOptions_$cshowList -}
51046791ec399d8726fe8e0ad9a20a93
  $fShowGameOptions1 :: GameOfLife.GameOptions -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GameOfLife.GameOptions w1 :: GHC.Base.String ->
                 case w of ww { GameOfLife.GameOptions ww1 ww2 ->
                 GameOfLife.$w$cshowsPrec 0 ww1 ww2 w1 }) -}
5c6cefec33a47e81ec198ef4491c351b
  $fShowGameOptions2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GameOptions {"#) -}
b777de95752b492a0289ff71b7599157
  $fShowGameOptions3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
e6e0f6a9b620f889ae129d32cef9b35f
  $fShowGameOptions4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "runs = "#) -}
ab627f95817f0eee109d9c34d25505fc
  $fShowGameOptions5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
bc3430ee5f6e97b1afdf51c435ea6d33
  $fShowGameOptions6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "grid = "#) -}
51046791ec399d8726fe8e0ad9a20a93
  $fShowGameOptions_$cshow ::
    GameOfLife.GameOptions -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GameOfLife.GameOptions ->
                 GameOfLife.$fShowGameOptions_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
51046791ec399d8726fe8e0ad9a20a93
  $fShowGameOptions_$cshowList ::
    [GameOfLife.GameOptions] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GameOfLife.GameOptions
                   GameOfLife.$fShowGameOptions1) -}
51046791ec399d8726fe8e0ad9a20a93
  $fShowGameOptions_$cshowsPrec ::
    GHC.Types.Int -> GameOfLife.GameOptions -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U,1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GameOfLife.GameOptions
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GameOfLife.GameOptions ww3 ww4 ->
                 GameOfLife.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
a85437821e2c0955d97d8afa0d286118
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GameOfLife.Grid
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GameOfLife.Grid
                   ww2 :: GHC.Types.Int
                   w :: GHC.Base.String ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       GameOfLife.$fShowGameOptions6
                       (let {
                          s :: GHC.Base.String
                          = GHC.Base.++
                              @ GHC.Types.Char
                              GameOfLife.$fShowGameOptions5
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GameOfLife.$fShowGameOptions4
                                 (case ww2 of ww3 { GHC.Types.I# ww4 ->
                                  case GHC.Show.$wshowSignedInt
                                         0
                                         ww4
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            GameOfLife.$fShowGameOptions3
                                            x) of ww5 { (#,#) ww6 ww7 ->
                                  GHC.Types.: @ GHC.Types.Char ww6 ww7 } }))
                        } in
                        case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# "[]"# s
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (GHC.Show.$fShowBool_$cshowList
                                  x1
                                  (let {
                                     lvl17 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                   } in
                                   letrec {
                                     showl :: [[GHC.Types.Bool]] -> [GHC.Types.Char]
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ ds2 :: [[GHC.Types.Bool]] ->
                                       case ds2 of wild1 {
                                         [] -> lvl17
                                         : y ys
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (GHC.Show.$fShowBool_$cshowList y (showl ys)) }
                                   } in
                                   showl xs)) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++ @ GHC.Types.Char GameOfLife.$fShowGameOptions2 (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           GameOfLife.$fShowGameOptions2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))) }) -}
859a577b2fe060730697d1e2adc5cce2
  $wgameGrid ::
    GHC.Prim.Int#
    -> GHC.Types.Int -> [GameOfLife.Coordinate] -> GameOfLife.Grid
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Types.Int
                   w :: [GameOfLife.Coordinate] ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># 1 ww) of wild {
                   GHC.Types.False
                   -> let {
                        lvl2 :: [GHC.Types.Int]
                        = case ww1 of wild1 { GHC.Types.I# y -> GHC.Enum.eftInt 1 y }
                      } in
                      letrec {
                        go1 :: GHC.Prim.Int# -> [[GHC.Types.Bool]]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Prim.Int# ->
                          GHC.Types.:
                            @ [GHC.Types.Bool]
                            (let {
                               ds :: GHC.Types.Int {- Strictness: m -} = GHC.Types.I# x
                             } in
                             letrec {
                               go2 :: [GHC.Types.Int] -> [GHC.Types.Bool]
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ ds1 :: [GHC.Types.Int] ->
                                 case ds1 of wild1 {
                                   [] -> GHC.Types.[] @ GHC.Types.Bool
                                   : y ys
                                   -> GHC.Types.:
                                        @ GHC.Types.Bool
                                        (GHC.List.elem
                                           @ (GHC.Types.Int, GHC.Types.Int)
                                           GHC.Arr.$fIx(,)_$s$fEq(,)
                                           (y, ds)
                                           w)
                                        (go2 ys) }
                             } in
                             go2 lvl2)
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x ww) of wild1 {
                               GHC.Types.False -> go1 (GHC.Prim.+# x 1)
                               GHC.Types.True -> GHC.Types.[] @ [GHC.Types.Bool] })
                      } in
                      go1 1
                   GHC.Types.True -> GHC.Types.[] @ [GHC.Types.Bool] }) -}
cb8109d4d559490cff86f5d10240b37e
  $wgo :: [[GHC.Types.Bool]] -> GHC.Prim.Int# -> [[GHC.Types.Char]]
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
a4a586dc90f2e4ce08edba9892e84df1
  type Coordinate = (GHC.Types.Int, GHC.Types.Int)
51046791ec399d8726fe8e0ad9a20a93
  data GameOptions
    = GameOptions {grid :: GameOfLife.Grid, runs :: GHC.Types.Int}
f3016d87e99dbea4c6e99234a431cd7e
  type Grid = [[GHC.Types.Bool]]
2ffdeecb7020d608868de00e7b9eb080
  type RenderFunc =
    GHC.Types.Bool -> GameOfLife.Grid -> GHC.Types.IO ()
0f2b714175e239b3626635239581275c
  createOpts ::
    GameOfLife.Grid -> GHC.Types.Int -> GameOfLife.GameOptions
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True) GameOfLife.GameOptions -}
8a4c9c8a93d16b6ef5377ee2c19918a6
  gameGrid ::
    (GHC.Types.Int, GHC.Types.Int)
    -> [GameOfLife.Coordinate] -> GameOfLife.Grid
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(U),1*U(U))><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (GHC.Types.Int, GHC.Types.Int)
                   w1 :: [GameOfLife.Coordinate] ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 GameOfLife.$wgameGrid ww4 ww2 w1 } }) -}
7da75cea028874c431892ca4c452d1d6
  glider :: GHC.Types.Int -> GHC.Types.Int -> GameOfLife.Grid
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><L,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int h :: GHC.Types.Int ->
                 GameOfLife.gameGrid (w, h) GameOfLife.glider1) -}
aa150b26632edfcf6646d645dd674370
  glider1 :: [GameOfLife.Coordinate]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameOfLife.Coordinate
                   GameOfLife.glider13
                   GameOfLife.glider2) -}
3b74b0c330984d3a0171ad1675f043aa
  glider10 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameOfLife.glider7, GameOfLife.glider8)) -}
1566e4df78a5181df0a99c4eb5b6d81b
  glider11 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameOfLife.glider12, GameOfLife.glider8)) -}
54bec6722f9f1f6521c8208ac9e6c477
  glider12 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
06ba49ba7b7bc64da1aa03ee125105ba
  glider13 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameOfLife.glider7, GameOfLife.glider12)) -}
4b1caabbc3300155339196f7d80c7a5a
  glider2 :: [GameOfLife.Coordinate]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameOfLife.Coordinate
                   GameOfLife.glider11
                   GameOfLife.glider3) -}
8e04404ab1d76a51bd7d6657342c440d
  glider3 :: [GameOfLife.Coordinate]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameOfLife.Coordinate
                   GameOfLife.glider10
                   GameOfLife.glider4) -}
20f4ee7b711c18fd09bd50687f0f7df9
  glider4 :: [GameOfLife.Coordinate]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameOfLife.Coordinate
                   GameOfLife.glider9
                   GameOfLife.glider5) -}
90db9f36a7fceb033a04a1ee0e9e104d
  glider5 :: [GameOfLife.Coordinate]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameOfLife.Coordinate
                   GameOfLife.glider6
                   (GHC.Types.[] @ GameOfLife.Coordinate)) -}
ef4722c8d50346af9f9d2243d71009ad
  glider6 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameOfLife.glider8, GameOfLife.glider7)) -}
e2b625097c74a9bebb1824e3342f053d
  glider7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2) -}
09362ee1612cf9b8d629329314bd3995
  glider8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3) -}
1c58d7c2f1f93a7682c12ed90f27e4e4
  glider9 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameOfLife.glider8, GameOfLife.glider8)) -}
e9ece04b893c799d406c47b4c75c6ec6
  grid :: GameOfLife.GameOptions -> GameOfLife.Grid
  RecSel GameOfLife.GameOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GameOfLife.GameOptions ->
                 case ds of wild { GameOfLife.GameOptions ds1 ds2 -> ds1 }) -}
d2c142e0e7a264a1703ad30a8627f5d2
  nextGeneration :: GameOfLife.Grid -> GameOfLife.Grid
  {- Arity: 1, Strictness: <S,U> -}
8af47ab71a01a36d96f398dd103b4538
  readGrid :: GHC.IO.FilePath -> GHC.Types.IO GameOfLife.Grid
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GameOfLife.readGrid1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <GameOfLife.Grid>_R)) -}
cff740b978f0e96e7e9de1f5032d303e
  readGrid1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GameOfLife.Grid #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ path :: GHC.IO.FilePath
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        path
                        GHC.IO.IOMode.ReadMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    GameOfLife.readGrid_go (GameOfLife.readGrid2 ipv3) #) } }) -}
95d0c82ecc58c261b62c30a1689f3707
  readGrid2 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   GameOfLife.readGrid3) -}
3f066390392a4ffd3e83f368422a445f
  readGrid3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
5fa7123a88ff5b21b13956bd18283b26
  readGrid_go :: [[GHC.Types.Char]] -> [[GHC.Types.Bool]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
28f0912018375c722b6b2161089b668a
  runGame :: GameOfLife.GameOptions -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U(U,1*U(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                GameOfLife.runGame1
                  `cast`
                (<GameOfLife.GameOptions>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
f7e02f7683b0add54ed9ebdeb4650a0d
  runGame1 ::
    GameOfLife.GameOptions
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(U,1*U(U))><L,U>,
     Unfolding: (\ opts :: GameOfLife.GameOptions
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case opts of wild { GameOfLife.GameOptions ds ds1 ->
                    case ds1 of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0 y) of wild2 {
                      GHC.Types.False -> GHC.Types.[] @ GHC.Types.Char
                      GHC.Types.True
                      -> case GameOfLife.$wgo ds y of wild3 {
                           [] -> GHC.Types.[] @ GHC.Types.Char
                           : x xs1
                           -> Data.OldList.intercalate_$spoly_go
                                @ GHC.Types.Char
                                x
                                (Data.OldList.prependToAll
                                   @ [GHC.Types.Char]
                                   GameOfLife.readGrid3
                                   xs1) } } } })
                   GHC.Types.False
                   eta) -}
b2f1d9b02e3c96bd5281ed5c5e2b2f59
  runGameContiniously ::
    GameOfLife.GameOptions
    -> GHC.Types.Int -> GameOfLife.RenderFunc -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,1*U(1*U,A)><L,U(U)><C(C(C(S))),C(C1(C1(U(U,A))))><L,U>,
     Unfolding: InlineRule (0, True, True)
                GameOfLife.runGameContiniously1
                  `cast`
                (<GameOfLife.GameOptions>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GameOfLife.RenderFunc>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
5f4bb66e8604878cf7162ef3375745a6
  runGameContiniously1 ::
    GameOfLife.GameOptions
    -> GHC.Types.Int
    -> GameOfLife.RenderFunc
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U,A)><L,U(U)><C(C(C(S))),C(C1(C1(U(U,A))))><L,U> -}
d01304e9dd5bb9460a0dd9d8035497d0
  runs :: GameOfLife.GameOptions -> GHC.Types.Int
  RecSel GameOfLife.GameOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GameOfLife.GameOptions ->
                 case ds of wild { GameOfLife.GameOptions ds1 ds2 -> ds2 }) -}
aef375165af0a7b3c26c2504abfcb41a
  showGrid :: GameOfLife.Grid -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [[GHC.Types.Bool]] ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : ipv ipv1
                   -> case GHC.List.$wlenAcc
                             @ [GHC.Types.Bool]
                             wild
                             0 of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.># 0 y) of wild1 {
                        GHC.Types.False
                        -> let {
                             lvl2 :: [GHC.Types.Int]
                             = case GHC.List.$wlenAcc @ GHC.Types.Bool ipv 0 of ww1 { DEFAULT ->
                               GHC.Enum.eftInt 0 (GHC.Prim.-# ww1 1) }
                           } in
                           letrec {
                             go1 :: GHC.Prim.Int# -> [[GHC.Types.Char]]
                               {- Arity: 1, Strictness: <L,U> -}
                             = \ x :: GHC.Prim.Int# ->
                               GHC.Types.:
                                 @ [GHC.Types.Char]
                                 (let {
                                    lvl3 :: [GHC.Types.Bool]
                                    = GHC.List.$w!! @ [GHC.Types.Bool] wild x
                                  } in
                                  letrec {
                                    go2 :: [GHC.Types.Int] -> [GHC.Types.Char]
                                      {- Arity: 1, Strictness: <S,1*U> -}
                                    = \ ds1 :: [GHC.Types.Int] ->
                                      case ds1 of wild2 {
                                        [] -> GHC.Types.[] @ GHC.Types.Char
                                        : y1 ys
                                        -> GHC.Types.:
                                             @ GHC.Types.Char
                                             (case y1 of ww { GHC.Types.I# ww1 ->
                                              case GHC.List.$w!!
                                                     @ GHC.Types.Bool
                                                     lvl3
                                                     ww1 of wild3 {
                                                GHC.Types.False -> GameOfLife.showGrid2
                                                GHC.Types.True -> GameOfLife.showGrid1 } })
                                             (go2 ys) }
                                  } in
                                  go2 lvl2)
                                 (case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.==# x y) of wild2 {
                                    GHC.Types.False -> go1 (GHC.Prim.+# x 1)
                                    GHC.Types.True -> GHC.Types.[] @ [GHC.Types.Char] })
                           } in
                           case go1 0 of wild2 {
                             [] -> GameOfLife.readGrid3
                             : x xs1
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  (Data.OldList.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     x
                                     (Data.OldList.prependToAll
                                        @ [GHC.Types.Char]
                                        GameOfLife.readGrid3
                                        xs1))
                                  GameOfLife.readGrid3 }
                        GHC.Types.True -> GameOfLife.readGrid3 } } }) -}
a9e8b5f66e7d58b21adb7f3bdba11af0
  showGrid1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '@') -}
a97a86eeab31b3c9efc8eb211f846eb3
  showGrid2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '-') -}
instance GHC.Show.Show [GameOfLife.GameOptions]
  = GameOfLife.$fShowGameOptions
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

